{"version":3,"sources":["recipe.module.css","BurgerForRescipeSearch.svg","Recipe.js","Top.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","image","calories","ingredients","className","style","recipe","src","alt","map","ingredient","text","Top","Burger","Home","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","async","fetch","response","json","getRecipes","then","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,OAAS,uBAAuB,YAAc,4BAA4B,MAAQ,wB,sCCDlID,EAAOC,QAAU,IAA0B,oD,oLCmB5BC,EAhBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAiBC,GAAyB,EAAnCC,SAAmC,EAAzBD,OAAOE,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAWC,IAAMC,QACpB,yBAAKF,UAAWC,IAAMJ,MAAOM,IAAKN,EAAOO,IAAI,KAE7C,wBAAIJ,UAAWC,IAAML,OAAQA,GAC7B,wBAAII,UAAWC,IAAMF,aAClBA,EAAYM,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,Y,gBCEXC,EATH,WACV,OACE,yBAAKR,UAAU,UACb,yBAAKA,UAAU,SAASG,IAAKM,IAAQL,IAAI,WACzC,wBAAIJ,UAAU,SAAd,uBC2DSU,EApDF,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACVC,EADU,KACDC,EADC,OAEWF,mBAAS,IAFpB,mBAEVG,EAFU,KAEFC,EAFE,OAGSJ,mBAAS,YAHlB,mBAGVK,EAHU,KAGHC,EAHG,KAKjBC,qBAAU,YAZO,SAAMF,GAAN,eAAAG,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OACSL,EADT,mBAJf,WAIe,oBAHd,sCAEG,cACXM,EADW,yBAIVA,EAASC,QAJC,sCAafC,CAAWR,GAAOS,MAAK,SAAAC,GACrBb,EAAWa,EAAKC,MAChBC,QAAQC,IAAIH,QAEb,CAACV,IAaJ,OACE,yBAAKhB,UAAU,QACb,kBAAC,EAAD,MACA,0BAAM8B,SATQ,SAAAC,GAChBA,EAAEC,iBACFf,EAASH,GACTC,EAAU,KAMmBf,UAAU,eACnC,2BACEA,UAAU,aACViC,KAAK,OACLC,MAAOpB,EACPqB,SAnBa,SAAAJ,GACnBhB,EAAUgB,EAAEK,OAAOF,OACnBN,QAAQC,IAAIf,MAmBR,4BAAQd,UAAU,gBAAgBiC,KAAK,UACrC,uCAGJ,yBAAKjC,UAAU,WACZY,EAAQP,KAAI,SAAAH,GAAM,OACjB,kBAAC,EAAD,CACEmC,IAAKnC,EAAOA,OAAOoC,MACnB1C,MAAOM,EAAOA,OAAOoC,MACrBxC,SAAUI,EAAOA,OAAOJ,SACxBD,MAAOK,EAAOA,OAAOL,MACrBE,YAAaG,EAAOA,OAAOH,oBC/CxBwC,EARH,WACV,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,QCKcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.6e6fa0e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"recipe_image__BtdIE\",\"recipe\":\"recipe_recipe__BdaUe\",\"ingredients\":\"recipe_ingredients__2m5_s\",\"title\":\"recipe_title__1jR5P\"};","module.exports = __webpack_public_path__ + \"static/media/BurgerForRescipeSearch.9d669ac1.svg\";","import React from \"react\";\nimport style from \"./recipe.module.css\";\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className={style.recipe}>\n      <img className={style.image} src={image} alt=\"\" />\n\n      <h1 className={style.title}>{title}</h1>\n      <ol className={style.ingredients}>\n        {ingredients.map(ingredient => (\n          <li>{ingredient.text}</li>\n        ))}\n      </ol>\n      {/*<p>{calories}</p>*/}\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport \"./App.css\";\nimport Burger from \"./BurgerForRescipeSearch.svg\";\n\nconst Top = () => {\n  return (\n    <div className=\"header\">\n      <img className=\"burger\" src={Burger} alt=\"Burger\" />\n      <h1 className=\"title\">The recipe finder</h1>\n    </div>\n  );\n};\n\nexport default Top;\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\nimport Top from \"./Top\";\n\nconst APP_ID = \"2832d27a\";\nconst APP_KEY = \"dda7e49d2eecdfec712f65eb966f73b2\";\n\nconst getRecipes = async query => {\n  const response = await fetch(\n    `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n  );\n  return response.json();\n};\n\nconst Home = () => {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chickpea\");\n\n  useEffect(() => {\n    getRecipes(query).then(data => {\n      setRecipes(data.hits);\n      console.log(data);\n    });\n  }, [query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"Home\">\n      <Top />\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          <b>Search</b>\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}